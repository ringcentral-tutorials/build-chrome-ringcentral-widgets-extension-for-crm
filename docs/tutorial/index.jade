style.
  #viewsaurus .saurus-prose ul {
    list-style-type: disc;
    list-style-position: inside;
  }
  #viewsaurus .saurus-prose ol { 
    list-style-type: decimal;
    list-style-position: inside;
  }
  #viewsaurus menu, #viewsaurus ol, #viewsaurus ul {
      padding: 0 0 0 15px;
  }
  #viewsaurus .saurus-prose {
    width: 50%;
  }
  #viewsaurus .saurus-code {
    left: 50%;
  }
script.
  window.addEventListener('load', function() {
    document.querySelectorAll('.saurus-content a').forEach(function(dom) {
      dom.setAttribute('target', '_blank')
    })
  })
.chapter(data-title='Build Chrome RingCentral widgets extension for CRM')
  .step(data-title='Overview', data-file='../README.md', data-highlight='1-16')
    :markdown
      ## Overview

      In this guided tutorial you will learn how to create Chrome RingCentral widgets extension for CRM. The guide is broken up into three sections:

      0. What does Chrome RingCentral widgets extension for CRM do?
      1. Learn how to setup, configure and get ready to development.
      2. Learn how to Add features to the extension

      When you are finished, you will be ready to create Chrome RingCentral widgets extension for CRMs.

  .step(data-title='What does Chrome RingCentral widgets extension for CRM do?', data-file='../README.md', data-highlight='17-48')
    :markdown
      ## What does Chrome RingCentral widgets extension for CRM do?

      In general, All the third party features of our [ringcentral-embeddable](https://github.com/ringcentral/ringcentral-embeddable) supported and add click-to-call buttons:

      - For CRM contact phone number text, we make it click-to-call link.

      ![ ](https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-1.png)

      - For CRM contact list, we will add a hover-to-show tooltip to show click-to-call button.

      ![cc](https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-2.png)

      - For CRM contact info page, we will add a click-to-call button in proper position.

      ![ ](https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-3.png)

      - Sync CRM contacts to our widgets after user authorize.

      ![ ](https://github.com/zxdong262/insightly-embeddable-ringcentral-phone/raw/master/screenshots/insightly-4.png)

      - Sync call log to CRM automatically or manually.

      ![ ](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs6.png)

      - Check CRM contact activities from our widgets.

      ![ ](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs7.png)

      - Show CRM contact info panel when inbound/outbound call with CRM contact.

      ![ ](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hubspot1.png)

      ## Demo video(Insightly)

      [https://youtu.be/Qfje5d5OdK0](https://youtu.be/Qfje5d5OdK0)

  .step(data-title='Prepare Your Environment', data-file='../README.md', data-highlight='68-99')
    :markdown
      ## Prepare Your Environment

      Need nodejs 8.10+/npm, recommend using [nvm](https://github.com/creationix/nvm) to install nodejs/npm.

      Then let's create an extension project with [ringcentral-embeddable-extension-factory](https://github.com/ringcentral/ringcentral-embeddable-extension-factory):

      ```
      npx ringcentral-embeddable-extension-factory my-app

      # make sure you set `https://*.insightly.com/*` as url, we will use insightly as target CRM site.
      ```

      Looks like this:

      ![ ](https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/cli.png)

      And there is a [video](https://youtu.be/2njQSk8x2K4) to show this too.

      Then, after the project folder is created, install the necessary prerequisites:

      ```
      cd my-app

      # install dependencies
      npm i

      # create local config file
      cp config.sample.js config.js

      # edit config.js, set proper `thirdPartyConfigs.serviceName`

      # let's build the extension
      npm start

      # now my-app/dist is ready for use as extension source
      ```

  .step(data-title='Load extension to Chrome', data-file='../README.md', data-highlight='86-89')
    :markdown
      ## Now let's test the extension

      1. Go to Chrome extensions page.
      2. Open developer mode
      3. Load `dist` as unpacked package.
      4. Go to the CRM site to check

  .step(data-title='Add features to extension', data-file='../README.md', data-highlight='91-100')
    :markdown
      ## Add features to extension

      You can see that without any coding, currently we just add the [ringcentral-embeddable](https://github.com/ringcentral/ringcentral-embeddable) Phone widgets, you call with it, but it is not interactive with CRM site yet, All those features listed need your coding efforts to make it work.

      To make it easier, we already set common modules to reduce developer efforts, you could set proper selectors, methods to make all features to work:

      - Edit [src/chrome-extension/config.js](src/chrome-extension/config.js) to make click-to-call related features to work
      - Follow the guide in [src/chrome-extension/features/third-party-api.js](src/chrome-extension/features/third-party-api.js) to make all third party features to work.
      - Further more you can edit [dist/manifest.json](dist/manifest.json) and [dist/background.js](dist/background.js) to do more customization work.
      - And you can always read [Realworld code examples](https://github.com/ringcentral-tutorials/build-chrome-ringcentral-widgets-extension-for-crm#realworld-code-examples) to get some hint about how to do it.

      In the following chaptors, we will learn how exactly to make it work. This tutorial will take `insightly.com` as example, before continuing, please create an account in `insightly.com`, it is free. And we already build the insightly extension already, you can check the [source code](https://github.com/zxdong262/insightly-embeddable-ringcentral-phone).

  .step(data-title='Convert phone number text to click-to-call link', data-file='../README.md', data-highlight='91-100')
    :markdown
      ## Convert phone number text to click-to-call link

      ![ ](https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-1.png)

      It is pretty simple, we just need to find proper css selector.

      ![ ](https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/txt-to-link.png)

      And edit `src/chrome-extension/config.js` `phoneNumberSelectors` to be like this:

      ```js
        // modify phone number text to click-to-call link
        export const phoneNumberSelectors = [
          ///* example config
          {
            urlCheck: (href) => {
              return href.includes('?blade=/details/contact')
            },
            selector: '#modal-details-body .metadata-span-phone'
          }
          //*/
        ]
      ```

      Then refresh extension in Chrome extension page, check in insightly contact detail page.


  .step(data-title='Add a click-to-call button in contact info page', data-file='../README.md', data-highlight='91-100')
    :markdown
      ## Add a click-to-call button in contact info page

      ![ ](https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-2.png)

      And edit `src/chrome-extension/config.js` `insertClickToCallButton` to be like this:

      As you can see, insightly contact page just have all phhone number info in dom,
      so we can just extract them from dom
      ```js

        import {
          RCBTNCLS2
        } from './common/helpers'

        export const insertClickToCallButton = [
          {
            // must match page url
            urlCheck: href => {
              return href.includes('?blade=/details/contact')
            },

            // define in the page how to get phone number,
            // if can not get phone number, will not insert the call button
            getContactPhoneNumbers: () => {
              let phones = document.querySelectorAll('.contact [data-display-type="PHONE"]')
              return Array.from(phones)
                .reduce((prev, node) => {
                  let titleWrap = node.querySelector('.metadata-row-title')
                  let title = titleWrap
                    ? titleWrap.textContent.trim()
                    : 'Phone Number'
                  let numberWrap = node.querySelector('.metadata-row-viewer-phone')
                  let number = numberWrap
                    ? numberWrap.textContent.trim()
                    : ''
                  if (number) {
                    prev.push({
                      id: title,
                      title,
                      number
                    })
                  }
                  return prev
                }, [])
            },

            // parent dom to insert call button
            // can be multiple condition
            // the first one matches, rest the array will be ignored
            parentsToInsertButton: [
              {
                getElem: () => {
                  return document.querySelector('#modal-details-body header .btn-toolbar')
                },
                insertMethod: 'insertBefore',
                shouldInsert: () => {
                  return !document.querySelector('#modal-details-body header .btn-toolbar .' + RCBTNCLS2)
                }
              }
            ]
          }
        ]
      ```

      Then refresh extension in Chrome extension page, check in insightly contact detail page.

  .step(data-title='Practice: Add hover-to-show tooltip to show click-to-call button', data-file='../README.md', data-highlight='91-100')
    :markdown
      ## Practice: Add hover-to-show tooltip to show click-to-call button

      If you get a sense of how the config works, now it is time to try it yourself.

      Edit `src/chrome-extension/config.js` `hoverShowClickToCallButton` function to make this feature work.

      Think about your solution and compare with https://github.com/zxdong262/insightly-embeddable-ringcentral-phone/blob/master/src/chrome-extension/config.js

  .step(data-title='Add third party features', data-file='../README.md', data-highlight='91-100')
    :markdown
      ## Practice: Add third party features

      After the warn up, now it is time to try the third party features.

      Read our [third party document](https://github.com/ringcentral/ringcentral-embeddable/blob/master/docs/third-party-service-in-widget.md) first.

      Then follow `src/chrome-extension/features/third-party-api.js`'s instruction to finish all the todos.

      In next chaptor we will talk about authorization

  .step(data-title='Add third party features: authorization', data-file='../README.md', data-highlight='91-100')
    :markdown
      ## Add third party features: authorization

      It is a common practice that getting user authorization before accessing user data, so we make common UI module to do it, developer just need to define the function of authorization(`doAuth`) in `src/chrome-extension/features/auth.js`.

      Since CRM site are so different, there is no common practice for this. For example:

      - Hubspot support oauth, so we could use iframe to visit oauth url
      - Insightly support apiKey, so we could get apiKey from user setting page
      - For redtailCRM, do not need to do anything, since they do not support apiKey or oauth, just set to `authed`.

      In general, if you could access user data as logined user from browser, no special action needed.

      You can check [Hubspot extension](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/blob/master/src/chrome-extension/features/auth.js) as examples.

  .step(data-title='Add third party features: contacts', data-file='../README.md', data-highlight='91-100')
    :markdown
      ## Add third party features: contacts

      After getting user authorization we could get contacts list and send to RingCentral widgets.

      Again, CRM site are different, there is no common practice for this.

      ![ ](images/network.png)

      In general, if you could access user data as logined user from browser, no special action needed. Check network from Chrome browser's developer tool, usually there will be a request for contact list, that is the api that you should use, or CRM have special api for developers, then you should check CRM's api document. Then replace `getContacts` function in `src/chrome-extension/features/contacts.js` with real action.

      You can check [Hubspot extension](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/blob/master/src/chrome-extension/features/contacts.js) as examples.

  .step(data-title='Practice: Addtional settings', data-file='../README.md', data-highlight='91-100')
    :markdown
      ## Practice: Addtional settings

      Further more you can edit [dist/manifest.json](dist/manifest.json) and [dist/background.js](dist/background.js) to do more customization work, such as filtered urls you do not want to show widgets etc.

      Read source code to check the code in real world:

      - https://github.com/zxdong262/insightly-embeddable-ringcentral-phone/blob/master/dist/manifest.json
      - https://github.com/zxdong262/insightly-embeddable-ringcentral-phone/blob/master/dist/background.js

      That is all, thanks for reading!

